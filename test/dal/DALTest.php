<?php

namespace DAL;

/**
 * Test class for DAL.
 * Generated by PHPUnit on 2015-06-25 at 21:28:48.
 */
class DALTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DAL
     */
    protected $DAL;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->DAL = \DAL\DAL::getInstance();
    }

    /**
     * @group DAL
     */
    public function testCreateTable()
    {
        $fid = new \DAL\Field('id', 'INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY');
        $fname = new \DAL\Field('name', 'VARCHAR(30) NOT NULL');

        $new_table = new \DAL\Table("TEST001", array($fid, $fname));

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }

        $tablesBefore = $this->DAL->getTableNames();
        $this->DAL->createTable($new_table);
        $tablesAfter = $this->DAL->getTableNames();
        $this->assertEquals(1, count($tablesAfter) - count($tablesBefore));

        $exists2 = $this->DAL->isTableExists($new_table->name);
        $this->assertTrue($exists2);
    }

    /**
     * @group DAL
     */
    public function testGetTables()
    {
        $fid = new \DAL\Field('id', 'INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY');
        $fname = new \DAL\Field('name', 'VARCHAR(30) NOT NULL');

        $new_table = new \DAL\Table("TEST001", array($fid, $fname));

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }

        $tablesBefore = $this->DAL->getTables();
        $this->DAL->createTable($new_table);
        $tablesAfter = $this->DAL->getTables();

        $this->assertEquals(1, count($tablesAfter) - count($tablesBefore));
    }

    /**
     * @group DAL
     */
    public function testDropTable()
    {
        $fid = new \DAL\Field('id', 'INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY');
        $fname = new \DAL\Field('name', 'VARCHAR(30) NOT NULL');

        $new_table = new \DAL\Table("TEST002", array($fid, $fname));

        $exists = $this->DAL->isTableExists($new_table->name);
        if (!$exists) {
            $this->DAL->createTable($new_table);
        }

        $this->DAL->dropTable($new_table->name);
        $exists = $this->DAL->isTableExists($new_table->name);
        $this->assertFalse($exists);
    }

    /**
     * @group DAL
     */
    public function testGetTableByName()
    {
        $fid = new \DAL\Field('id', 'INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY');
        $fnum = new \DAL\Field('num', 'DOUBLE(3,2)');
        $new_table = new \DAL\Table("TEST003", array($fid, $fnum));

        $this->DAL->dropTableIfExists($new_table->name);
        $this->DAL->createTable($new_table);

        $exists = $this->DAL->isTableExists($new_table->name);

        $this->assertEquals(true, $exists);

        $table = $this->DAL->getTableByName($new_table->name);

        $Comp = \Manager\Comparer::getInstance();
        // var_dump($new_table->fields_arr);
        // var_dump($table->fields_arr);
        $this->assertTrue($Comp->areEqual($new_table, $table));
    }

    /**
     * @group DAL
     */
    public function testCreateTableFields()
    {
        $fid = new \DAL\Field('id', 'INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY');
        $fname = new \DAL\Field('name', 'VARCHAR(30) NOT NULL');
        $fields = array($fid, $fname);
        $new_table = new \DAL\Table("TEST004", $fields);

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->dropTable($new_table->name);
        }

        $this->DAL->CreateTable($new_table);

        $returned_fields = $this->DAL->GetTableFields("TEST004");

        $Comp = \Manager\Comparer::getInstance();

        $obj1 = $fields[0];
        $obj2 = $returned_fields[0];
        $this->assertTrue($Comp->areEqual($obj1, $obj2));

        $obj1 = $fields[1];
        $obj2 = $returned_fields[1];
        $this->assertTrue($Comp->areEqual($obj1, $obj2));
    }

    /**
     * @group DAL
     */
    public function testCreateTableFields2()
    {
        $fid = new \DAL\Field('Number', 'DOUBLE(7,3) ZEROFILL');
        $fname = new \DAL\Field('String', 'CHAR(30)');
        $fields = array($fid, $fname);
        $new_table = new \DAL\Table("TEST005", $fields);

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }
        $this->DAL->CreateTable($new_table);

        $returned_fields = $this->DAL->GetTableFields($new_table->name);

        $Comp = \Manager\Comparer::getInstance();
        $obj1 = $fields[0];
        $obj2 = $returned_fields[0];
        $this->assertTrue($Comp->areEqual($obj1, $obj2));
        $obj1 = $fields[1];
        $obj2 = $returned_fields[1];
        $this->assertTrue($Comp->areEqual($obj1, $obj2));
    }

    /**
     * @group DAL
     */
    public function testCreateTableFields3()
    {
        $fid = new \DAL\Field('ID', 'INT(6) UNSIGNED PRIMARY KEY NOT NULL');
        $fname = new \DAL\Field('mytext', 'TEXT');
        $fields = array($fid, $fname);
        $new_table = new \DAL\Table("TEST006", $fields);

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }

        $this->DAL->CreateTable($new_table);
        $returned_fields = $this->DAL->GetTableFields($new_table->name);
        $Comp = \Manager\Comparer::getInstance();
        $obj1 = $fields[0];
        $obj2 = $returned_fields[0];
        $this->assertTrue($Comp->areEqual($obj1, $obj2));
        $obj1 = $fields[1];
        $obj2 = $returned_fields[1];
        $this->assertTrue($Comp->areEqual($obj1, $obj2));
    }
    /*
      /**
     * @group DAL
     * \/
      public function testSyncTableArr()
      {
      echo "\n";
      $fid = new \DAL\Field('id','INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY');
      $fname = new \DAL\Field('name','VARCHAR(30) NOT NULL');
      $new_table = new \DAL\Table("TEST007", array($fid,$fname));

      $exists = $this->DAL->isTableExists($new_table->name);
      if (!$exists) {
      $this->DAL->CreateTable($new_table);
      }

      $this->DAL->SyncTableArr();
      $table_names = array();
      foreach ($this->DAL->getTables() as $tbl){
      $table_names[] = $tbl->name;
      }
      //var_dump($table_names);
      $this->assertContains(strtolower($new_table->name),$table_names);

      }
     */

    /**
     * @group DAL
     */
    public function testTableAddRow()
    {
        echo "\n";
        $fid = new \DAL\Field('ID', 'INT(8) UNSIGNED PRIMARY KEY NOT NULL');
        $f1 = new \DAL\Field('mydouble', 'DOUBLE(8,3)');
        $f2 = new \DAL\Field('myvarchar', 'VARCHAR(30)');
        $f3 = new \DAL\Field('mytext', 'TEXT');
        $fields = array($fid, $f1, $f2, $f3);
        $new_table = new \DAL\Table("TEST008", $fields);
        $new_table->type_arr = array("integer", "double", "string", "string");

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }
        $this->DAL->CreateTable($new_table);
        $obj = new DummyClass();
        $row_arr = array("ID" => 1,
            "myvarchar" => "gugu",
            "mydouble" => 2.3,
            "mytext" => json_encode($obj));
        $new_table->AddRow($row_arr);

        $rows_arr = $new_table->SelectRows();
        $row2_arr = $rows_arr[0];
        // var_dump($row_arr);
        // var_dump($row2_arr);
        $this->assertTrue($row_arr == $row2_arr);
    }

    /**
     * @group DAL
     */
    public function testTableAddRow2()
    {
        echo "\n";
        $fid = new \DAL\Field('ID', 'INT(8) UNSIGNED PRIMARY KEY NOT NULL');
        $f1 = new \DAL\Field('mydouble', 'DOUBLE(8,3)');
        $f2 = new \DAL\Field('myvarchar', 'VARCHAR(30)');
        $f3 = new \DAL\Field('mytext', 'TEXT');
        $fields = array($fid, $f1, $f2, $f3);
        $new_table = new \DAL\Table("TEST008", $fields);
        $new_table->type_arr = array("integer", "double", "string", "string");

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }
        $this->DAL->CreateTable($new_table);
        $obj = new DummyClass();
        $row_arr = array("ID" => 1,
            "myvarchar" => "gugu");
        $new_table->addRow($row_arr);

        $rows_arr = $new_table->SelectRows();
        $row2_arr = $rows_arr[0];
        //var_dump($rows_arr);
        $this->assertTrue($row_arr["ID"] == $row2_arr["ID"]);
        $this->assertTrue($row_arr["myvarchar"] == $row2_arr["myvarchar"]);
    }

    /**
     * @group DAL
     */
    public function testTableSelectRow()
    {
        echo "\n";
        $fid = new \DAL\Field('ID', 'INT(8) UNSIGNED PRIMARY KEY NOT NULL');
        $f1 = new \DAL\Field('mydouble', 'DOUBLE(8,3)');
        $f2 = new \DAL\Field('myvarchar', 'VARCHAR(30)');
        $f3 = new \DAL\Field('mytext', 'TEXT');
        $fields = array($fid, $f1, $f2, $f3);
        $new_table = new \DAL\Table("TEST009", $fields);
        $new_table->type_arr = array("integer", "double", "string", "string");

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }
        $this->DAL->CreateTable($new_table);
        $obj = new DummyClass();
        $row_arr = array("ID" => 1,
            "mydouble" => 2.3,
            "myvarchar" => "gugu",
            "mytext" => json_encode($obj));
        $new_table->AddRow($row_arr);
        $row_arr = array("ID" => 2,
            "mydouble" => 123.456,
            "myvarchar" => "Behiat",
            "mytext" => "kuzia kukuzia !!");
        $new_table->AddRow($row_arr);
        // "'ID' = ?", array(2)
        $rows_arr = $new_table->SelectRows("ID = ?", array(2));
        $row2_arr = $rows_arr[0];
        //echo "\nThe result: \n";
        //var_dump($rows_arr);
        $this->assertSame($row_arr, $row2_arr);
    }

    /**
     * @group DAL
     */
    public function testTableUpdateRow()
    {
        echo "\n";
        $fid = new \DAL\Field('ID', 'INT(8) UNSIGNED PRIMARY KEY NOT NULL');
        $f1 = new \DAL\Field('mydouble', 'DOUBLE(8,3)');
        $f2 = new \DAL\Field('myvarchar', 'VARCHAR(30)');
        $f3 = new \DAL\Field('mytext', 'TEXT');
        $fields = array($fid, $f1, $f2, $f3);
        $new_table = new \DAL\Table("TEST010", $fields);
        $new_table->type_arr = array("integer", "double", "string", "string");

        $exists = $this->DAL->isTableExists($new_table->name);
        if ($exists) {
            $this->DAL->DropTable($new_table->name);
        }
        $this->DAL->CreateTable($new_table);
        $obj = new DummyClass();
        $row_arr = array("ID" => 1,
            "mydouble" => 2.3,
            "myvarchar" => "gugu",
            "mytext" => json_encode($obj));
        $new_table->AddRow($row_arr);
        $row_arr = array("ID" => 2,
            "mydouble" => 123.456,
            "myvarchar" => "Behiat",
            "mytext" => "kuzia kukuzia !!");
        $new_table->AddRow($row_arr);
        // "'ID' = ?", array(2)
        $new_table->UpdateRow("mydouble=?", "ID = ?", array(2.4, 2));
        $rows_arr = $new_table->SelectRows("ID = ?", array(2));
        $row2_arr = $rows_arr[0];
        //echo "\nThe result: \n";
        //var_dump($rows_arr);
        $this->assertEquals($row2_arr['mydouble'], 2.4);
    }
    // This function must be moved to table class
    /*
      public function testCreateTableFromArray()
      {
      echo "\n";
      $exists = $this->DAL->isTableExists('Dummy');
      if ($exists) {
      $this->DAL->DropTable("Dummy");
      }
      $arr = array("ID"=>12, "IQ"=>209, "Name"=>"Guy", "Power"=>"High");
      $this->DAL->CreateTableFromArray("Dummy", $arr);

      $returned_fields = $this->DAL->GetTableFields("Dummy");


      $f0 = new Field('ID','INT(6) ZEROFILL UNSIGNED');
      $f1 = new Field('IQ','INT(6) ZEROFILL UNSIGNED');
      $f2 = new Field('Name','VARCHAR(30)');
      $f3 = new Field('Power','VARCHAR(30)');
      $fields = array($f0,$f1,$f2,$f3);

      $Comp = Comparer::getInstance();
      for ($i = 0; $i < 4; $i++) {
      $obj1 = $fields[$i];
      $obj2 = $returned_fields[$i];
      $this->assertTrue($Comp->areEqual($obj1, $obj2));
      }
      }

      public function testInsertRowArray()
      {
      echo "\n";
      $exists = $this->DAL->isTableExists('Dummy2');
      if ($exists) {
      $this->DAL->DropTable("Dummy2");
      }
      $arr = array("ID"=>12, "IQ"=>209, "Name"=>"Guy", "Power"=>"High");
      $this->DAL->CreateTableFromArray("Dummy2", $arr);
      $this->DAL->InsertRowArray("Dummy2", $arr);
      $arr2 = $this->DAL->SelectRowArray("Dummy2");
      var_dump($arr);
      var_dump($arr2);
      $this->assertSame($arr, $arr2);
      } // function testInsertRowArray()
      /*
      public function testInsertRowArray()
      {
      echo "\n";
      $exists = $this->DAL->isTableExists('Dummy2');
      if ($exists) {
      $this->DAL->DropTable("Dummy2");
      }
      $arr = array("ID"=>12, "IQ"=>209, "Name"=>"Guy", "Power"=>"High");
      $this->DAL->CreateTableFromArray("Dummy2", $arr);
      $this->DAL->InsertRowArray("Dummy2", $arr);
      $arr2 = $this->DAL->SelectRowArray("Dummy2");
      var_dump($arr);
      var_dump($arr2);
      $this->assertEquals($arr, $arr2);
      } // function testInsertRowArray()
     */
    /*

      public function testInsertRowObject()
      {
      echo "\n";
      $exists = $this->DAL->isTableExists('Dummy2');
      if ($exists) {
      $this->DAL->DropTable("Dummy2");
      }

      $obj1 = new DummyClass();
      $this->DAL->CreateTableFromObject("Dummy2", $obj1);
      $this->DAL->InsertRowObject("Dummy2", $obj1);
      echo "\n OK!";

      $obj2 = $this->DAL->SelectRowObject("Dummy2");

      $Comp = Comparer::getInstance();
      $this->assertTrue($Comp->areEqual($obj1, $obj2));

      } */

    /*
      id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      firstname VARCHAR(30) NOT NULL,
      lastname VARCHAR(30) NOT NULL,
      email VARCHAR(50),
      reg_date TIMESTAMP
      )";
     */
}
