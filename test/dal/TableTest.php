<?php
namespace DAL;

/**
 * Test class for Table.
 * Generated by PHPUnit on 2015-11-13 at 15:40:44.
 */
class TableTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Table
     */
    protected $DAL;
    protected $Table;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->DAL = \DAL\DAL::getInstance();
        
        $this->Table = new \DAL\Table;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Table::setName
     * @todo Implement testSetName().
     */
    public function testSetName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Table::updateFieldsArray
     * @todo Implement testUpdateFieldsArray().
     */
    public function testUpdateFieldsArray()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * @group TableTest
     */
    public function testCreateTableFromObject()
    {
        $dal = \DAL\DAL::getInstance();
        $d = new DummyClass();
        $tableName = "DummyClass";
        
        $exists = $dal->isTableExists($tableName);
        if ($exists) {
            $dal->DropTable($tableName);
        }
        $new_table = \DAL\Table::constructTableFromObject($tableName, $d);
        /*
        foreach ( $new_table->fields_arr as $field ) {
            echo $field->getName (), ":", $field->getType(), "\n";
        }
        */
        
        $exists = $dal->isTableExists($tableName);
        $this->assertTrue($exists);
    }
    
    /**
     * @group TableTest
     */
    public function testAddRowFromObject()
    {
        $dal = \DAL\DAL::getInstance();
        $d = new DummyClass();
        $tableName = "DummyClass";
                 
        $exists = $dal->isTableExists($tableName);
        if ($exists) {
            $dal->DropTable($tableName);
        }
        $new_table = \DAL\Table::constructTableFromObject($tableName, $d);
                
        $new_table->addRowFromObject($d);
        
        $rows = $new_table->selectRows();
        $this->assertEquals(1, count($rows));
        $firstRow = $rows[0];
        $this->assertTrue(array_key_exists("public_var", $firstRow));
        $this->assertTrue(array_key_exists("private_var", $firstRow));
        $this->assertTrue(array_key_exists("protected_var", $firstRow));
        $this->assertTrue(array_key_exists("public_array", $firstRow));
        $this->assertEquals("kuzimuzi", $firstRow["protected_var"]);
    }
    
    /**
     * @group TableTest
     */
    public function testUpdateRowFromObject()
    {
        $dal = \DAL\DAL::getInstance();
        $d = new DummyClass();
        $tableName = "DummyClass";
                 
        $exists = $dal->isTableExists($tableName);
        if ($exists) {
            $dal->DropTable($tableName);
        }
        $new_table = \DAL\Table::constructTableFromObject($tableName, $d);                
        $new_table->addRowFromObject($d);
        
        $d->public_var = 123;
        
        $new_table->updateRowFromObject( $d);
        //$new_table->updateRow("public_var=?", "private_var = ?", array(123, 11));
        
        
        $rows = $new_table->selectRows();
        $this->assertEquals(1, count($rows));
        $firstRow = $rows[0];
        $this->assertTrue(array_key_exists("public_var", $firstRow));
        $this->assertTrue(array_key_exists("private_var", $firstRow));
        $this->assertTrue(array_key_exists("protected_var", $firstRow));
        $this->assertTrue(array_key_exists("public_array", $firstRow));
        $this->assertEquals("kuzimuzi", $firstRow["protected_var"]);
        $this->assertEquals("123", $firstRow["public_var"]);
    }
    
    /**
     * @group TableTest
     */
    public function testAddObjectFromRow()
    {
        $dal = \DAL\DAL::getInstance();
        $d = new DummyClass();
        $tableName = "DummyClass";
                 
        $exists = $dal->isTableExists($tableName);
        if ($exists) {
            $dal->DropTable($tableName);
        }
        $new_table = \DAL\Table::constructTableFromObject($tableName, $d);
         
        $new_table->addRowFromObject($d);
         
        $rows = $new_table->selectRows();
         
        $obj = $new_table->rowToObject($rows[0], "\DAL\DummyClass");
       // var_dump($d);
       // var_dump($obj);
        $this->assertEquals(serialize($obj), serialize($d));
    }
}
